{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Documents/epam/final-project/src/Components/Profile/ProfileContainer.js\";\nimport React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { setPokemonProfile } from '../../redux/profile-reducer';\nimport { withRouter } from 'react-router';\nimport { compose } from 'redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProfileContainer extends React.Component {\n  componentDidMount() {\n    // debugger;\n    let pokemonID = this.props.match.params.pokemonID;\n\n    if (!pokemonID) {\n      pokemonID = 25;\n    }\n\n    this.props.pokemons.map(pokemonItem => {\n      if (pokemonItem.id == pokemonID) {\n        this.props.setPokemonProfile(pokemonItem);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Profile, {\n      props: this.props,\n      profile: this.props.profile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile,\n  pokemons: state.pokemonListPage.pokemons\n}); // export default connect (mapStateToProps, {setPokemonProfile}) (ProfileContainer);\n//compose - объединяет функции\n\n\nexport default compose(connect(mapStateToProps, {\n  setPokemonProfile\n}), withRouter)(ProfileContainer); // withRouter:\n// проблема - два источника истины\n// путь url какой именно покемон - пишем в PokemonGrid при NavLink; пример 'http://localhost:3000/profile/4';\n// получить доступ к этому пути чтобы при изменении в адресной строке менялся покемон: \n// 1) withRouter - HOC - оборачивает компаненту чтобы следить за путем\n// 2) если после componentDidMount поставить debugger введем в косоли this.props и увидим новые объекты (match location history...))\n// match - совпадение нашего URL c каким-то Route из <App />\n// 3) match.isExact = false - роут совпал с путем (/profile) но не точь-в-точь - нужно чтобы было true, поэтому   \n// 4) match.path - путь Route из <App />\n//    match.url -  в строке адресной\n// 5) для точного сопадегния нудно достать этот номер профиля, чтобы он приходил в match.params \n//    для этого в Route из <App /> пишем Route path='/profile/:pokemonID?' где 'pokemonID' имя параметра; '?' значит что он необязателен\n// 6) сам путь до него будет: 'this.props.match.params.pokemonID' - записываем в константу при componentDidMount  \n//\n//\n//\n//\n//\n//\n//\n//\n//\n//","map":{"version":3,"sources":["/Users/alexander/Documents/epam/final-project/src/Components/Profile/ProfileContainer.js"],"names":["React","Profile","connect","setPokemonProfile","withRouter","compose","ProfileContainer","Component","componentDidMount","pokemonID","props","match","params","pokemons","map","pokemonItem","id","render","profile","mapStateToProps","state","profilePage","pokemonListPage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,OAAxB;;;AAGA,MAAMC,gBAAN,SAA+BN,KAAK,CAACO,SAArC,CAA8C;AAC1CC,EAAAA,iBAAiB,GAAG;AAChB;AACA,QAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,SAAxC;;AACA,QAAI,CAACA,SAAL,EAAgB;AACZA,MAAAA,SAAS,GAAG,EAAZ;AACH;;AACD,SAAKC,KAAL,CAAWG,QAAX,CAAoBC,GAApB,CAAwBC,WAAW,IAAI;AACnC,UAAIA,WAAW,CAACC,EAAZ,IAAkBP,SAAtB,EAAiC;AAC7B,aAAKC,KAAL,CAAWP,iBAAX,CAA6BY,WAA7B;AACH;AACJ,KAJD;AAKH;;AAEDE,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAE,KAAKP,KAArB;AAA4B,MAAA,OAAO,EAAE,KAAKA,KAAL,CAAWQ;AAAhD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAlByC;;AAqB9C,IAAIC,eAAe,GAAIC,KAAD,KAAY;AAC9BF,EAAAA,OAAO,EAAEE,KAAK,CAACC,WAAN,CAAkBH,OADG;AAE9BL,EAAAA,QAAQ,EAAEO,KAAK,CAACE,eAAN,CAAsBT;AAFF,CAAZ,CAAtB,C,CAKA;AAEA;;;AACA,eAAeR,OAAO,CAClBH,OAAO,CAAEiB,eAAF,EAAmB;AAAChB,EAAAA;AAAD,CAAnB,CADW,EAElBC,UAFkB,CAAP,CAGbE,gBAHa,CAAf,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { setPokemonProfile } from '../../redux/profile-reducer';\nimport { withRouter } from 'react-router';\nimport { compose } from 'redux';\n\n\nclass ProfileContainer extends React.Component{\n    componentDidMount() {     \n        // debugger;\n        let pokemonID = this.props.match.params.pokemonID;\n        if (!pokemonID) {\n            pokemonID = 25;  \n        }\n        this.props.pokemons.map(pokemonItem => {\n            if (pokemonItem.id == pokemonID) {\n                this.props.setPokemonProfile(pokemonItem);\n            } \n        })\n    }\n\n    render() {\n        return(\n            <Profile props={this.props} profile={this.props.profile}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    pokemons: state.pokemonListPage.pokemons,\n});\n\n// export default connect (mapStateToProps, {setPokemonProfile}) (ProfileContainer);\n\n//compose - объединяет функции\nexport default compose(\n    connect (mapStateToProps, {setPokemonProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n// withRouter:\n// проблема - два источника истины\n// путь url какой именно покемон - пишем в PokemonGrid при NavLink; пример 'http://localhost:3000/profile/4';\n// получить доступ к этому пути чтобы при изменении в адресной строке менялся покемон: \n// 1) withRouter - HOC - оборачивает компаненту чтобы следить за путем\n// 2) если после componentDidMount поставить debugger введем в косоли this.props и увидим новые объекты (match location history...))\n// match - совпадение нашего URL c каким-то Route из <App />\n// 3) match.isExact = false - роут совпал с путем (/profile) но не точь-в-точь - нужно чтобы было true, поэтому   \n// 4) match.path - путь Route из <App />\n//    match.url -  в строке адресной\n// 5) для точного сопадегния нудно достать этот номер профиля, чтобы он приходил в match.params \n//    для этого в Route из <App /> пишем Route path='/profile/:pokemonID?' где 'pokemonID' имя параметра; '?' значит что он необязателен\n// 6) сам путь до него будет: 'this.props.match.params.pokemonID' - записываем в константу при componentDidMount  \n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"]},"metadata":{},"sourceType":"module"}