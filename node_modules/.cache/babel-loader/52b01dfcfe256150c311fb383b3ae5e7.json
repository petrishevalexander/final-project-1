{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Documents/epam/final-project/src/Components/PokemonList/PokemonListContainer.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { catchIt, letgo, setPokemons, setCurrentPage, setTotalPokemonsCount } from \"../../redux/pokemonList-reducer\";\nimport axios from \"axios\";\nimport './PokemonList.css';\nimport PokemonList from './PokemonList';\nimport { getPokemons } from './../../api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PokemonListContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n    };\n  }\n\n  // по умолчанию конструктор перебрасывает свое конструирование на\n  // react.component, поэтому удаляем\n  // constructor(props) {\n  //   super(props);\n  // }\n  //компонента монтируется один раз в страницу \n  componentDidMount() {\n    getPokemons().then(response => {\n      if (this.props.pokemons.length == 0) {\n        this.props.setPokemons(response.data);\n        this.props.setTotalPokemonsCount(response.data.length); // console.log(response.data.length);\n      }\n    });\n  } //метод\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(PokemonList, {\n      totalPokemonsCount: this.props.totalPokemonsCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      pokemons: this.props.pokemons,\n      onPageChanged: this.onPageChanged,\n      catchIt: this.props.catchIt,\n      letgo: this.props.letgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this);\n  }\n\n} //mapStateToProps, mapDispatchToProps - функции, возвращающие объекты;\n//mapStateToProps - передаем данные из стейта в пропсы\n\n\nlet mapStateToProps = state => {\n  return {\n    pokemons: state.pokemonListPage.pokemons,\n    pageSize: state.pokemonListPage.pageSize,\n    totalPokemonsCount: state.pokemonListPage.totalPokemonsCount,\n    currentPage: state.pokemonListPage.currentPage\n  };\n}; // // mapDispatchToProps - свойства - колбэки\n// let mapDispatchToProps = (dispatch) => {\n//     return {\n//         setPokemons: (pokemons) => {\n//             dispatch(setPokemonsAC(pokemons));\n//         },\n//         setCurrentPage: (currentPage) => {\n//             dispatch(setCurrentPageAC(currentPage));\n//         },\n//         // setTotalPokemonsCount: (totalPokemonsCount) => {\n//         //     dispatch(setTotalPokemonsCountAC(totalPokemonsCount));\n//         // },\n//     }    \n// }\n\n\nexport default connect(mapStateToProps, {\n  catchIt,\n  letgo,\n  setPokemons,\n  setCurrentPage,\n  setTotalPokemonsCount\n})(PokemonListContainer); // экспортируем оборачивая в connect;\n// можем сократить код упростив mapDispatchToProps, так как connect делает это \n// преобразование mapDispatchToProps и оборачивание в dispatch\n// let name = 'Ivan';\n// let obj1 = { name: name };\n// let obj2 = { name };         // то же самое","map":{"version":3,"sources":["/Users/alexander/Documents/epam/final-project/src/Components/PokemonList/PokemonListContainer.js"],"names":["React","connect","catchIt","letgo","setPokemons","setCurrentPage","setTotalPokemonsCount","axios","PokemonList","getPokemons","PokemonListContainer","Component","onPageChanged","pageNumber","props","componentDidMount","then","response","pokemons","length","data","render","totalPokemonsCount","pageSize","currentPage","mapStateToProps","state","pokemonListPage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,WAAzB,EAAsCC,cAAtC,EAAsDC,qBAAtD,QAAmF,iCAAnF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,WAAR,QAA0B,iBAA1B;;;AAEA,MAAMC,oBAAN,SAAmCV,KAAK,CAACW,SAAzC,CAAmD;AAAA;AAAA;;AAAA,SAoBjDC,aApBiD,GAoBhCC,UAAD,IAAgB;AAC9B,WAAKC,KAAL,CAAWT,cAAX,CAA0BQ,UAA1B;AACD,KAtBgD;AAAA;;AAEnD;AACA;AACA;AACA;AACA;AAEA;AACEE,EAAAA,iBAAiB,GAAG;AAClBN,IAAAA,WAAW,GAAGO,IAAd,CAAmBC,QAAQ,IAAI;AAC3B,UAAI,KAAKH,KAAL,CAAWI,QAAX,CAAoBC,MAApB,IAA8B,CAAlC,EAAqC;AACnC,aAAKL,KAAL,CAAWV,WAAX,CAAuBa,QAAQ,CAACG,IAAhC;AACA,aAAKN,KAAL,CAAWR,qBAAX,CAAiCW,QAAQ,CAACG,IAAT,CAAcD,MAA/C,EAFmC,CAGnC;AACD;AACF,KANH;AAOD,GAjBgD,CAmBjD;;;AAIAE,EAAAA,MAAM,GAAG;AACP,wBACI,QAAC,WAAD;AACE,MAAA,kBAAkB,EAAE,KAAKP,KAAL,CAAWQ,kBADjC;AAEE,MAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWS,QAFvB;AAGE,MAAA,WAAW,EAAE,KAAKT,KAAL,CAAWU,WAH1B;AAIE,MAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWI,QAJvB;AAKE,MAAA,aAAa,EAAE,KAAKN,aALtB;AAME,MAAA,OAAO,EAAE,KAAKE,KAAL,CAAWZ,OANtB;AAOE,MAAA,KAAK,EAAE,KAAKY,KAAL,CAAWX;AAPpB;AAAA;AAAA;AAAA;AAAA,YADJ;AAaD;;AArCgD,C,CAyCnD;AACA;;;AACA,IAAIsB,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHR,IAAAA,QAAQ,EAAEQ,KAAK,CAACC,eAAN,CAAsBT,QAD7B;AAEHK,IAAAA,QAAQ,EAAEG,KAAK,CAACC,eAAN,CAAsBJ,QAF7B;AAGHD,IAAAA,kBAAkB,EAAEI,KAAK,CAACC,eAAN,CAAsBL,kBAHvC;AAIHE,IAAAA,WAAW,EAAEE,KAAK,CAACC,eAAN,CAAsBH;AAJhC,GAAP;AAMH,CAPD,C,CAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAevB,OAAO,CAAEwB,eAAF,EAClB;AAAEvB,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,WAAlB;AAA+BC,EAAAA,cAA/B;AAA+CC,EAAAA;AAA/C,CADkB,CAAP,CAC8DI,oBAD9D,CAAf,C,CAEI;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { catchIt, letgo, setPokemons, setCurrentPage, setTotalPokemonsCount } from \"../../redux/pokemonList-reducer\";\nimport axios from \"axios\";\nimport './PokemonList.css';\nimport PokemonList from './PokemonList';\nimport {getPokemons} from './../../api/api';\n \nclass PokemonListContainer extends React.Component {\n\n// по умолчанию конструктор перебрасывает свое конструирование на\n// react.component, поэтому удаляем\n// constructor(props) {\n//   super(props);\n// }\n\n//компонента монтируется один раз в страницу \n  componentDidMount() {\n    getPokemons().then(response => {\n        if (this.props.pokemons.length == 0) {\n          this.props.setPokemons(response.data);\n          this.props.setTotalPokemonsCount(response.data.length);\n          // console.log(response.data.length);\n        } \n      });\n  }\n\n  //метод\n  onPageChanged = (pageNumber) => {\n    this.props.setCurrentPage(pageNumber);\n  }\n  render() {\n    return (\n        <PokemonList \n          totalPokemonsCount={this.props.totalPokemonsCount}\n          pageSize={this.props.pageSize}\n          currentPage={this.props.currentPage}\n          pokemons={this.props.pokemons}\n          onPageChanged={this.onPageChanged}\n          catchIt={this.props.catchIt}\n          letgo={this.props.letgo}\n          \n\n          />\n    )\n  }\n}\n \n\n//mapStateToProps, mapDispatchToProps - функции, возвращающие объекты;\n//mapStateToProps - передаем данные из стейта в пропсы\nlet mapStateToProps = (state) => {\n    return {\n        pokemons: state.pokemonListPage.pokemons,\n        pageSize: state.pokemonListPage.pageSize,\n        totalPokemonsCount: state.pokemonListPage.totalPokemonsCount,\n        currentPage: state.pokemonListPage.currentPage,\n    }\n}\n// // mapDispatchToProps - свойства - колбэки\n\n// let mapDispatchToProps = (dispatch) => {\n//     return {\n//         setPokemons: (pokemons) => {\n//             dispatch(setPokemonsAC(pokemons));\n//         },\n//         setCurrentPage: (currentPage) => {\n//             dispatch(setCurrentPageAC(currentPage));\n//         },\n//         // setTotalPokemonsCount: (totalPokemonsCount) => {\n//         //     dispatch(setTotalPokemonsCountAC(totalPokemonsCount));\n//         // },\n//     }    \n// }\n\n\nexport default connect (mapStateToProps, \n    { catchIt, letgo, setPokemons, setCurrentPage, setTotalPokemonsCount }) (PokemonListContainer);\n    // экспортируем оборачивая в connect;\n    // можем сократить код упростив mapDispatchToProps, так как connect делает это \n    // преобразование mapDispatchToProps и оборачивание в dispatch\n\n    // let name = 'Ivan';\n    // let obj1 = { name: name };\n    // let obj2 = { name };         // то же самое\n"]},"metadata":{},"sourceType":"module"}